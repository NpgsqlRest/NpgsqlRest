{
  //
  // https://www.npgsql.org/doc/connection-string-parameters.html
  //
  "ConnectionStrings": {
    "Default": "Host=127.0.0.1;Port=5432;Database=perf_tests;Username=postgres;Password=postgres"
  },
  "ConnectionName": "Default",

  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "NpgsqlRest": "Information"
    }
  },

  //
  // Set to true or false to enable or disable console logging for the NpgsqlRest globally
  //
  "UseLogging": true,
  //
  // Default logger name. Set to null to use default logger name which is NpgsqlRest (default namespace).
  //
  "LoggerName": null,
  //
  // Log endpoint created events.
  //
  "LogEndpointCreatedInfo": true,
  //
  // Log annotation set events. When endpoint properties are set from comment annotations.
  //
  "LogAnnotationSetInfo": true,
  //
  // Set to true to log connection notice events.
  //
  "LogConnectionNoticeEvents": true,
  //
  // Log commands executed on PostgreSQL.
  //
  "LogCommands": true,
  //
  // Set to true to log parameter mismatch warnings. These mismatches occur regularly when using functions with parameter overloads with different types.
  //
  "LogParameterMismatchWarnings": true,

  //
  // Array of urls to listen on Default: http://localhost:5000. 
  //
  "Urls": [],

  // 
  // Filter schema names similar to this parameters or null for all schemas.
  // 
  "SchemaSimilarTo": null,
  // 
  // Filter schema names not similar to this parameters or null for all schemas.
  // 
  "SchemaNotSimilarTo": null,
  // 
  // List of schema names to be included.
  // 
  "IncludeSchemas": null,
  // 
  // List of schema names to be excluded.
  //
  "ExcludeSchemas": null,

  // 
  // Filter routine names similar to this parameters or null for all routines.
  // 
  "NameSimilarTo": null,
  // 
  // Filter routine names not similar to this parameters or null for all routines.
  // 
  "NameNotSimilarTo": null,
  // 
  // List of routine names to be included.
  // 
  "IncludeNames": null,
  // 
  // List of routine names to be excluded.
  //
  "ExcludeNames": null,

  // 
  // Url prefix for every url created by the default url builder.
  //
  "UrlPathPrefix": "/api",
  //
  // Set to true to use kebab case for urls (default URL builder), otherwise use /prefix/schema/name as is. 
  // Public schemas are just /prefix/name
  //
  "KebabCaseUrls": true,
  //
  // Set to true to use camel case for names (parameters and field names), otherwise use the names as is.
  //
  "CamelCaseNames": true,

  //
  // Requires authorization for all endpoints.
  //
  "RequiresAuthorization": false,

  //
  // Sets the wait time (in seconds) before terminating the attempt  to execute a command and generating an error.
  // Default value for null is 30 seconds.
  //
  "CommandTimeout": null,

  //
  // Default HTTP method for all endpoints. Possible values are NULL or  GET, PUT, POST, DELETE, HEAD, OPTIONS, TRACE, PATCH, CONNECT
  // Set to NULL to use the default behavior:
  //
  // The endpoint is always GET if volatility option is STABLE or IMMUTABLE or the routine name either:
  // - Starts with `get_` (case insensitive).
  // - Ends with `_get` (case insensitive).
  // - Contains `_get_` (case insensitive).
  // 
  // Otherwise, the endpoint is POST (VOLATILE and doesn't contain `get`). 
  //
  "DefaultHttpMethod": null,
  //
  // Default parameter position Query String or JSON Body. Possible values are NULL, QueryString, BodyJson.
  // NULL is default behavior: if endpoint is not POST, use Query String, otherwise JSON Body.
  //
  "DefaultRequestParamType": null,
  //
  // Configure how to parse comments. Available options are Ignore, ParseAll, OnlyWithHttpTag.
  // Ignore: Routine comments are ignored.
  // ParseAll: Creates all endpoints and parses comments for to configure endpoint meta data (default).
  // OnlyWithHttpTag: Creates only endpoints from routines containing a comment with HTTP tag and and configures endpoint meta data.
  //
  "CommentsMode": "ParseAll",
  //
  // Configure how to send request headers to PostgreSQL. Available options are Ignore, AsContextConfig, AsDefaultParameter.
  // Ignore: Ignore request headers, don't send them to PostgreSQL (default).
  // AsContextConfig: Send all request headers as json object to PostgreSQL by executing set_config('context.headers', headers, false) before routine call.
  // AsDefaultParameter: Send all request headers as json object to PostgreSQL as default routine parameter with name set by RequestHeadersParameterName option.
  //
  "RequestHeadersMode": "Ignore",
  //
  // The name of the default routine parameter (text or json) to send request headers to PostgreSQL (parsed or unparsed).
  // This is only used when RequestHeadersMode is set to AsDefaultParameter.
  //
  "RequestHeadersParameterName": "headers",
  //
  // Options to configure HTTP file handling.
  //
  "HttpFileOptions": {
    //
    // Options for HTTP file generation. Available options are Disabled, File, Endpoint, Both.
    // Disabled - skip.
    // File - creates a file on disk.
    // Endpoint - exposes file content as endpoint.
    // Both - creates a file(s) on disk and exposes file content as endpoint.
    //
    "Option": "Disabled",
    //
    // The pattern to use when generating file names. {0} is database name, {1} is schema suffix with underline when FileMode is set to Schema.
    // Use this property to set the custom file name.
    // .http extension will be added automatically.
    //
    "NamePattern": "{0}{1}",
    //
    // Adds comment header to above request based on PostgreSQL routine. Available options are None, Simple, Full.
    // Set None to skip.
    // Set Simple (default) to add name, parameters and return values to comment header.
    // Set Full to add the entire routine code as comment header.
    //
    "CommentHeader": "Simple",
    //
    // When CommentHeader is set to Simple or Full, set to true to include routine comments in comment header.
    //
    "CommentHeaderIncludeComments": true,
    // 
    // Available options are Database or Schema.
    // Set to Database to create one http file for entire database.
    // Set to Schema to create new http file for every database schema.
    //
    "FileMode": "Database",
    //
    // Set to true to overwrite existing files.
    //
    "FileOverwrite": false
  }
}